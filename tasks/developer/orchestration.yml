---
# Software and configuration for orchestrating containers

- name: Kubernetes CLI
  block:

    - name: Install Kubernetes CLI
      snap:
        name: kubectl
        classic: yes
        state: '{{ bool_state }}'
      become: true

    - name: Activate Bash autocompletion for kubectl
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(kubectl completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: Minikube
  block:

    - name: Find out whether Minikube is installed
      command: dpkg-query -W minikube
      register: minikube_installed
      failed_when: minikube_installed.rc > 1
      changed_when: minikube_installed.rc == 1

    - name: Install Minikube
      apt:
        deb: '{{ minikube_baseurl }}/{{ minikube_package }}'
      when: minikube_installed.rc == 1 or state == 'latest'
      become: true

  tags:
    - kubernetes

- name: kubeseal
  block:

    - name: Install kubeseal binary
      get_url:
        url: '{{ kubeseal_baseurl }}/v{{ kubeseal_version }}/kubeseal-linux-amd64'
        dest: /usr/local/bin/kubeseal
        mode: 0755
        force: "{{ 'yes' if state == 'latest' else 'no' }}"
      become: true

  tags:
    - kubernetes

- name: SOPS
  block:

    - name: Install sops binary
      get_url:
        url: '{{ sops_baseurl }}/v{{ sops_version }}/sops-v{{ sops_version }}.linux'
        dest: /usr/local/bin/sops
        mode: 0755
        force: "{{ 'yes' if state == 'latest' else 'no' }}"
      become: true

  tags:
    - kubernetes

- name: OpenShift CLI
  block:

    - name: Find out whether OpenShift CLI is installed
      stat:
        path: /usr/local/bin/oc
      register: oc_installed
      changed_when: not oc_installed.stat.exists

    - name: Install OpenShift CLI
      unarchive:
        src: '{{ openshift_cli_baseurl }}/{{ openshift_cli_package }}'
        remote_src: true
        extra_opts: ['--strip-components', '1', '--wildcards', '*/oc']
        dest: /usr/local/bin/
        mode: 0755
        owner: root
        group: root
      when: not oc_installed.stat.exists or state == 'latest'
      become: true

    - name: Activate Bash autocompletion for OpenShift CLI
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(oc completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: Minishift
  block:

    - name: Find out whether Minishift is installed
      stat: path=/usr/local/bin/minishift
      register: minishift_installed
      changed_when: not minishift_installed.stat.exists

    - name: Install Minishift
      unarchive:
        src: '{{ minishift_baseurl }}/{{ minishift_package }}'
        remote_src: true
        extra_opts: ['--strip-components', '1', '--wildcards', '*/minishift']
        dest: /usr/local/bin/
        mode: 0755
        owner: root
        group: root
      when: not minishift_installed.stat.exists or state == 'latest'
      become: true

    - name: Activate Bash autocompletion for Minishift
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(minishift completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: k3s - lightweight K8s
  block:

    - name: Install k3s binary
      get_url:
        url: '{{ k3s_baseurl }}/{{ k3s_version }}/k3s'
        dest: /usr/local/bin/k3s
        mode: 0755
        force: "{{ 'yes' if state == 'latest' else 'no' }}"
      become: true

  tags:
    - kubernetes

- name: K9s - curses-based K8s CLI
  block:

    - name: Find out whether K9s is installed
      stat:
        path: /usr/local/bin/k9s
      register: k9s_installed
      changed_when: not k9s_installed.stat.exists

    - name: Install K9s
      unarchive:
        src: '{{ k9s_baseurl }}/{{ k9s_package }}'
        remote_src: true
        extra_opts: ['k9s']
        dest: /usr/local/bin/
        mode: 0755
        owner: root
        group: root
      when: not k9s_installed.stat.exists or state == 'latest'
      become: true

  tags:
    - kubernetes

- name: helm
  block:

    - name: Find out whether helm2 is installed
      stat:
        path: /usr/local/bin/helm2
      register: helm2_installed
      changed_when: not helm2_installed.stat.exists

    - name: Install helm2 binary
      unarchive:
        src: '{{ helm_baseurl }}/{{ helm2_package }}'
        remote_src: true
        extra_opts: ['--strip-components=1', '--transform=s/helm/helm2/', '--wildcards', '*/helm']
        dest: /usr/local/bin/
        mode: 0755
        owner: root
        group: root
      when: not helm2_installed.stat.exists or state == 'latest'
      become: true

    - name: Find out whether helm3 is installed
      stat:
        path: /usr/local/bin/helm3
      register: helm3_installed
      changed_when: not helm3_installed.stat.exists

    - name: Newer, default helm
      block:

        - name: Install helm3 binary
          unarchive:
            src: '{{ helm_baseurl }}/{{ helm3_package }}'
            remote_src: true
            extra_opts: ['--strip-components=1', '--transform=s/helm/helm3/', '--wildcards', '*/helm']
            dest: /usr/local/bin/
            mode: 0755
            owner: root
            group: root

        - name: Add symbolic link helm -> helm3
          file:
            src: /usr/local/bin/helm3
            path: helm
            state: link
            force: yes

      when: not helm3_installed.stat.exists or state == 'latest'
      become: true

    - name: Install helmfile binary
      get_url:
        url: '{{ helmfile_baseurl }}/{{ helmfile_version }}/helmfile_linux_amd64'
        dest: /usr/local/bin/helmfile
        mode: 0755
        force: "{{ 'yes' if state == 'latest' else 'no' }}"
      become: true

  tags:
    - kubernetes
    - helm
