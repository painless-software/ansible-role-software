---
# Software and configuration for orchestrating containers

- name: Kubernetes CLI
  block:

    - name: Install Kubernetes CLI
      snap:
        name: kubectl
        classic: yes
        state: '{{ bool_state }}'
      become: true

    - name: Activate Bash autocompletion for kubectl
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(kubectl completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: Minikube
  block:

    - name: Find out whether Minikube is installed
      command: dpkg-query -W minikube
      register: minikube_installed
      failed_when: minikube_installed.rc > 1
      changed_when: minikube_installed.rc == 1

    - name: Install Minikube
      apt:
        deb: '{{ minikube_baseurl }}/{{ minikube_package }}'
      when: minikube_installed.rc == 1 or state == 'latest'
      become: true

  tags:
    - kubernetes

- name: kubeseal
  block:

    - name: Find out whether kubeseal is installed
      stat:
        path: /usr/local/bin/kubeseal
      register: kubeseal_installed
      changed_when: not kubeseal_installed.stat.exists

    - name: Install/uninstall kubeseal
      block:

        - name: Install kubeseal binary
          unarchive:
            src: '{{ kubeseal_baseurl }}/{{ kubeseal_package }}'
            remote_src: true
            extra_opts: ['kubeseal']
            dest: /usr/local/bin/
            mode: 0755
            owner: root
            group: root
          when: not state == 'absent'

        - name: Uninstall kubeseal
          file:
            path: /usr/local/bin/kubeseal
            state: absent
          when: state == 'absent'

      become: true

  tags:
    - kubernetes

- name: SOPS
  block:

    - name: Find out whether SOPS is installed
      stat:
        path: /usr/local/bin/sops
      register: sops_installed
      changed_when: not sops_installed.stat.exists

    - name: Install/uninstall SOPS
      block:

        - name: Install sops binary
          get_url:
            url: '{{ sops_baseurl }}/v{{ sops_version }}/sops-v{{ sops_version }}.linux'
            dest: /usr/local/bin/sops
            mode: 0755
            force: "{{ 'yes' if state == 'latest' else 'no' }}"
          when: not sops_installed.stat.exists or state == 'latest'

        - name: Uninstall sops
          file:
            path: /usr/local/bin/sops
            state: absent
          when: state == 'absent'

      become: true

  tags:
    - kubernetes

- name: OpenShift CLI
  block:

    - name: Find out whether OpenShift CLI is installed
      stat:
        path: /usr/local/bin/oc
      register: oc_installed
      changed_when: not oc_installed.stat.exists

    - name: Install/uninstall oc
      block:

        - name: Install OpenShift CLI
          unarchive:
            src: '{{ openshift_cli_baseurl }}/{{ openshift_cli_package }}'
            remote_src: true
            extra_opts: ['oc']
            dest: /usr/local/bin/
            mode: 0755
            owner: root
            group: root
          when: not oc_installed.stat.exists or state == 'latest'

        - name: Uninstall OpenShift CLI
          file:
            path: /usr/local/bin/oc
            state: absent
          when: state == 'absent'

      become: true

    - name: Activate Bash autocompletion for OpenShift CLI
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(oc completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: Minishift
  block:

    - name: Find out whether Minishift is installed
      stat: path=/usr/local/bin/minishift
      register: minishift_installed
      changed_when: not minishift_installed.stat.exists

    - name: Install Minishift
      unarchive:
        src: '{{ minishift_baseurl }}/{{ minishift_package }}'
        remote_src: true
        extra_opts: ['--strip-components', '1', '--wildcards', '*/minishift']
        dest: /usr/local/bin/
        mode: 0755
        owner: root
        group: root
      when: not minishift_installed.stat.exists or state == 'latest'
      become: true

    - name: Activate Bash autocompletion for Minishift
      lineinfile:
        dest: '{{ ansible_env.HOME }}/.bash_aliases'
        create: true
        line: 'source <(minishift completion bash)'
        state: '{{ bool_state }}'

  tags:
    - kubernetes

- name: k3s - lightweight K8s
  block:

    - name: Install/uninstall K3s
      block:

        - name: Install k3s binary
          get_url:
            url: '{{ k3s_baseurl }}/{{ k3s_version }}/k3s'
            dest: /usr/local/bin/k3s
            mode: 0755
            force: "{{ 'yes' if state == 'latest' else 'no' }}"
          when: not state == 'absent'

        - name: Uninstall K3s
          file:
            path: /usr/local/bin/k3s
            state: absent
          when: state == 'absent'

      become: true

  tags:
    - kubernetes

- name: K9s - curses-based K8s CLI
  block:

    - name: Find out whether K9s is installed
      stat:
        path: /usr/local/bin/k9s
      register: k9s_installed
      changed_when: not k9s_installed.stat.exists

    - name: Install/uninstall K9s
      block:

        - name: Install K9s
          unarchive:
            src: '{{ k9s_baseurl }}/{{ k9s_package }}'
            remote_src: true
            extra_opts: ['k9s']
            dest: /usr/local/bin/
            mode: 0755
            owner: root
            group: root
          when: not k9s_installed.stat.exists or state == 'latest'

        - name: Uninstall K9s
          file:
            path: /usr/local/bin/k9s
            state: absent
          when: state == 'absent'

      become: true

  tags:
    - kubernetes

- name: helm
  block:

    - name: Find out whether helm is installed
      stat:
        path: /usr/local/bin/helm
      register: helm_installed
      changed_when: not helm_installed.stat.exists

    - name: Install/uninstall helm
      block:

        - name: Install helm binary
          unarchive:
            src: '{{ helm_baseurl }}/{{ helm_package }}'
            remote_src: true
            extra_opts: ['--strip-components=1', '--wildcards', '*/helm']
            dest: /usr/local/bin/
            mode: 0755
            owner: root
            group: root
          when: not helm_installed.stat.exists or state == 'latest'

        - name: Uninstall helm
          file:
            path: /usr/local/bin/helm
            state: absent
          when: state == 'absent'

      become: true

    - name: Install/uninstall helmfile
      block:

        - name: Install helmfile binary
          get_url:
            url: '{{ helmfile_baseurl }}/{{ helmfile_version }}/helmfile_linux_amd64'
            dest: /usr/local/bin/helmfile
            mode: 0755
            force: "{{ 'yes' if state == 'latest' else 'no' }}"
          when: not state == 'absent'

        - name: Uninstall helmfile
          file:
            path: /usr/local/bin/helmfile
            state: absent
          when: state == 'absent'

      become: true

  tags:
    - kubernetes
    - helm

- name: Juju and MicroK8s
  snap:
    name:
    - microk8s
    - juju
    - charmcraft
    classic: yes
    state: '{{ bool_state }}'
  become: true
  tags:
    - kubernetes
    - juju
