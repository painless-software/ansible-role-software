---
# Ruby tools and configuration

- name: Skip Ruby Gem doc generation by default
  lineinfile:
    dest: '{{ ansible_env.HOME }}/.gemrc'
    create: true
    line: 'gem: --no-document'
    state: '{{ bool_state }}'
  tags:
    - ruby

- name: Ensure user-installed Ruby Gems executables are found
  # TODO: implement this properly (separate lines are super-fragile!)
  lineinfile:
    dest: '{{ ansible_env.HOME }}/.bash_aliases'
    create: true
    line: '{{ item }}'
    state: '{{ bool_state }}'
  with_items:
    - '# Ensure Ruby Gems installed via `--user-install` are found'
    - 'which gem > /dev/null && {'
    - "  RUBY_USER_DIR=$(gem environment | grep 'USER INSTALLATION' | sed 's/^.* DIRECTORY: //')"
    - '  export PATH="$PATH:${RUBY_USER_DIR}/bin"'
    - '} # ---'
  tags:
    - ruby
    - bash

- name: Install Ruby development dependencies
  package:
    name: bundler
    state: '{{ state }}'
  become: true
  tags:
    - ruby

- name: Clone rbenv (Ruby version management)
  git:
    repo: https://github.com/rbenv/rbenv.git
    dest: '{{ ansible_env.HOME }}/.rbenv'
    depth: 1
  tags:
    - ruby

- name: rbenv install command (ruby-build plugin)
  git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: '{{ ansible_env.HOME }}/.rbenv/plugins/ruby-build'
    depth: 1
  tags:
    - ruby

- name: Activate rbenv for Bash
  lineinfile:
    dest: '{{ ansible_env.HOME }}/.bash_aliases'
    create: true
    line: '{{ item }}'
  with_items:
    - 'export RBENV_ROOT={{ ansible_env.HOME }}/.rbenv'
    - 'export PATH="$RBENV_ROOT/bin:$PATH"'
    - 'source <(rbenv init - bash)'
  tags:
    - bash
    - ruby
